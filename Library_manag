#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <sstream>

using namespace std;

// Abstract base class for library entities
class LibraryEntity {
public:
    virtual void displayDetails() const = 0;
    virtual void saveToFile() const = 0;
    virtual ~LibraryEntity() {}
};

// Base class for people
class Person : public LibraryEntity {
protected:
    string name;
    string contactInfo;

public:
    Person(const string& n, const string& contact)
        : name(n), contactInfo(contact) {}

    string getName() const { return name; }
    string getContact() const { return contactInfo; }

    virtual void displayDetails() const override {
        cout << "Name: " << name << "\n"
             << "Contact: " << contactInfo << "\n";
    }
};

// Upcoming Book class
class UpcomingBook {
private:
    string title;
    string author;
    string releaseDate;
    string description;

public:
    UpcomingBook(const string& t, const string& a,
                 const string& date, const string& desc)
        : title(t), author(a), releaseDate(date), description(desc) {}

    void displayDetails() const {
        cout << "Title: " << title << "\n"
             << "Author: " << author << "\n"
             << "Release Date: " << releaseDate << "\n"
             << "Description: " << description << "\n";
    }

    void saveToFile() const {
        ofstream file("upcoming_books.dat", ios::app);
        if (file.is_open()) {
            file << title << "|" << author << "|"
                 << releaseDate << "|" << description << endl;
            file.close();
        }
    }
};
// Book class with enhanced borrowing tracking
class Book : public LibraryEntity {
private:
    string title;
    string author;
    string isbn;
    int year;
    bool isAvailable;
    string currentBorrower;
    time_t borrowDate;
    static const int MAX_BORROW_DAYS = 14; // 2 weeks default borrow period

public:
    Book() : year(0), isAvailable(true), borrowDate(0) {}

    Book(const string& t, const string& a, const string& i, int y)
        : title(t), author(a), isbn(i), year(y), isAvailable(true),
          currentBorrower(""), borrowDate(0) {}

    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    string getISBN() const { return isbn; }
    bool getAvailability() const { return isAvailable; }
    string getCurrentBorrower() const { return currentBorrower; }
    int getYear() const { return year; }

    void setBorrowDate() {
        borrowDate = time(0);
    }
erurfueribfurevhfdbjsbbvf
bucuerbfuervnjfbvjfebvuebv
udedbbvuubfvuyebvuevfv
bhubefbvufuvryuvbv
reneriuvuerbvrbviutbviub
feknviruvnurivnibiurb

    int getRemainingDays() const {
        if (isAvailable) return 0;

        time_t now = time(0);
        int daysPassed = static_cast<int>(difftime(now, borrowDate) / (60 * 60 * 24));
        int daysRemaining = MAX_BORROW_DAYS - daysPassed;
        return (daysRemaining > 0) ? daysRemaining : 0;
    }

    void setAvailability(bool status, const string& borrower = "") {
        isAvailable = status;
        currentBorrower = borrower;
        if (!status) {
            setBorrowDate();
        }
    }

    virtual void displayDetails() const override {
        cout << "Title: " << title << "\n"
             << "Author: " << author << "\n"
             << "ISBN: " << isbn << "\n"
             << "Year: " << year << "\n"
             << "Status: " << (isAvailable ? "Available" : "Borrowed by " + currentBorrower);
        if (!isAvailable) {
            cout << " (Days remaining: " << getRemainingDays() << ")";
        }
        cout << "\n";
    }

    virtual void saveToFile() const override {
        ofstream file("books.dat", ios::app);
        if (file.is_open()) {
            file << title << "|" << author << "|" << isbn << "|"
                 << year << "|" << isAvailable << "|" << currentBorrower << endl;
            file.close();
        }
    }
};

// Member class with enhanced features
class Member : public Person {
private:
    string memberId;
    string password;
    static const int MAX_BORROWED = 3;
    Book* borrowedBooks[MAX_BORROWED];
    int borrowedCount;

public:
    Member(const string& n, const string& id,
           const string& contact, const string& pass)
        : Person(n, contact), memberId(id), password(pass), borrowedCount(0) {
        for (int i = 0; i < MAX_BORROWED; i++) {
            borrowedBooks[i] = nullptr;
        }
    }

    string getMemberId() const { return memberId; }
    string getPassword() const { return password; }

    bool authenticate(const string& id, const string& pass) const {
        return (memberId == id && password == pass);
    }

    bool canBorrow() const {
        return borrowedCount < MAX_BORROWED;
    }

    bool borrowBook(Book* book) {
        if (!canBorrow() || !book->getAvailability()) {
            return false;
        }
        borrowedBooks[borrowedCount++] = book;
        book->setAvailability(false, memberId);
        return true;
    }

    bool returnBook(Book* book) {
        for (int i = 0; i < borrowedCount; i++) {
            if (borrowedBooks[i] == book) {
                for (int j = i; j < borrowedCount - 1; j++) {
                    borrowedBooks[j] = borrowedBooks[j + 1];
                }
                borrowedCount--;
                book->setAvailability(true);
                return true;
            }
        }
        return false;
    }

    void displayBorrowingCapacity() const {
        cout << "Borrowing Capacity:\n"
             << "Currently borrowed: " << borrowedCount << " books\n"
             << "Maximum allowed: " << MAX_BORROWED << " books\n"
             << "Remaining capacity: " << (MAX_BORROWED - borrowedCount) << " books\n";
    }

    void displayBorrowedBooks() const {
        if (borrowedCount == 0) {
            cout << "No books currently borrowed.\n";
            return;
        }

        cout << "Currently Borrowed Books:\n";
        for (int i = 0; i < borrowedCount; i++) {
            cout << "\n=== Book " << (i + 1) << " ===\n";
            borrowedBooks[i]->displayDetails();
        }
    }

    virtual void displayDetails() const override {
        Person::displayDetails();
        cout << "Member ID: " << memberId << "\n";
        displayBorrowingCapacity();
        displayBorrowedBooks();
    }

    virtual void saveToFile() const override {
        ofstream file("members.dat", ios::app);
        if (file.is_open()) {
            file << name << "|" << memberId << "|" << contactInfo << "|" << password << endl;
            file.close();
        }
    }

    double calculateFine() const {
        double totalFine = 0.0;
        const double FINE_PER_DAY = 1.0; // $1 per day

        for (int i = 0; i < borrowedCount; i++) {
            int daysRemaining = borrowedBooks[i]->getRemainingDays();
            if (daysRemaining <= 0) {
                totalFine += (-daysRemaining) * FINE_PER_DAY;
            }
        }
        return totalFine;
    }
};
// Librarian class with enhanced security
class Librarian : public Person {
private:
    string username;
    string password;

public:
    Librarian(const string& n, const string& contact,
              const string& user, const string& pass)
        : Person(n, contact), username(user), password(pass) {}

    bool authenticate(const string& user, const string& pass) const {
        return (username == user && password == pass);
    }

    virtual void displayDetails() const override {
        Person::displayDetails();
        cout << "Role: Librarian\n";
    }

    virtual void saveToFile() const override {
        ofstream file("librarian.dat", ios::app);
        if (file.is_open()) {
            file << name << "|" << contactInfo << "|" << username << endl;
            file.close();
        }
    }
};

// Library Management System
class LibrarySystem {
private:
    static const int MAX_BOOKS = 1000;
    static const int MAX_MEMBERS = 500;
    static const int MAX_UPCOMING_BOOKS = 50;

    Book books[MAX_BOOKS];
    Member* members[MAX_MEMBERS];
    UpcomingBook* upcomingBooks[MAX_UPCOMING_BOOKS];
    Librarian* librarian;

    int bookCount;
    int memberCount;
    int upcomingBookCount;
    bool isLibrarianAuthenticated;
    string currentMemberId;

    void logTransaction(const string& memberId, const string& isbn, bool isBorrowing) {
        ofstream logFile("transactions.dat", ios::app);
        if (logFile.is_open()) {
            time_t now = time(0);
            char* dt = ctime(&now);
            logFile << dt << "Member: " << memberId << " "
                   << (isBorrowing ? "borrowed" : "returned")
                   << " book ISBN: " << isbn << endl;
            logFile.close();
        }
    }

    void saveAllBooks() {
        ofstream file("books.dat", ios::trunc);
        if (file.is_open()) {
            for (int i = 0; i < bookCount; i++) {
                file << books[i].getTitle() << "|"
                     << books[i].getAuthor() << "|"
                     << books[i].getISBN() << "|"
                     << books[i].getYear() << "|"
                     << books[i].getAvailability() << "|"
                     << books[i].getCurrentBorrower() << endl;
            }
            file.close();
        }
    }

    void loadBooksFromFile() {
        ifstream file("books.dat");
        string line;

        while (getline(file, line) && bookCount < MAX_BOOKS) {
            stringstream ss(line);
            string title, author, isbn, borrower;
            int year;
            bool available;

            getline(ss, title, '|');
            getline(ss, author, '|');
            getline(ss, isbn, '|');
            ss >> year;
            ss.ignore();
            ss >> available;
            ss.ignore();
            getline(ss, borrower);

            books[bookCount] = Book(title, author, isbn, year);
            if (!available) {
                books[bookCount].setAvailability(false, borrower);
            }
            bookCount++;
        }
        file.close();
    }

    void loadMembersFromFile() {
        ifstream file("members.dat");
        string line;

        while (getline(file, line) && memberCount < MAX_MEMBERS) {
            stringstream ss(line);
            string name, id, contact, password;

            getline(ss, name, '|');
            getline(ss, id, '|');
            getline(ss, contact, '|');
            getline(ss, password);

            members[memberCount++] = new Member(name, id, contact, password);
        }
        file.close();
    }

    void loadUpcomingBooksFromFile() {
        ifstream file("upcoming_books.dat");
        string line;

        while (getline(file, line) && upcomingBookCount < MAX_UPCOMING_BOOKS) {
            stringstream ss(line);
            string title, author, releaseDate, description;

            getline(ss, title, '|');
            getline(ss, author, '|');
            getline(ss, releaseDate, '|');
            getline(ss, description);

            upcomingBooks[upcomingBookCount++] =
                new UpcomingBook(title, author, releaseDate, description);
        }
        file.close();
    }

public:
    LibrarySystem() : bookCount(0), memberCount(0), upcomingBookCount(0),
                      isLibrarianAuthenticated(false), currentMemberId("") {
        librarian = new Librarian("Admin", "admin@library.com", "admin", "admin123");
        loadBooksFromFile();
        loadMembersFromFile();
        loadUpcomingBooksFromFile();
    }

    ~LibrarySystem() {
        saveAllBooks();
        for (int i = 0; i < memberCount; i++) {
            delete members[i];
        }
        for (int i = 0; i < upcomingBookCount; i++) {
            delete upcomingBooks[i];
        }
        delete librarian;
    }
        // Authentication methods
    bool authenticateLibrarian(const string& username, const string& password) {
        isLibrarianAuthenticated = librarian->authenticate(username, password);
        return isLibrarianAuthenticated;
    }

    bool authenticateMember(const string& id, const string& password) {
        Member* member = findMember(id);
        if (member && member->authenticate(id, password)) {
            currentMemberId = id;
            return true;
        }
        return false;
    }

    void logout() {
        isLibrarianAuthenticated = false;
        currentMemberId = "";
    }

    // Librarian functions
    void librarianAddBook(const string& title, const string& author,
                         const string& isbn, int year) {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }
        if (bookCount < MAX_BOOKS) {
            books[bookCount++] = Book(title, author, isbn, year);
            books[bookCount-1].saveToFile();
        } else {
            throw runtime_error("Library is full!");
        }
    }

    void addUpcomingBook(const string& title, const string& author,
                        const string& releaseDate, const string& description) {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }
        if (upcomingBookCount < MAX_UPCOMING_BOOKS) {
            upcomingBooks[upcomingBookCount++] =
                new UpcomingBook(title, author, releaseDate, description);
            upcomingBooks[upcomingBookCount-1]->saveToFile();
        } else {
            throw runtime_error("Upcoming books list is full!");
        }
    }

    bool librarianDeleteBook(const string& isbn) {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getISBN() == isbn) {
                if (!books[i].getAvailability()) {
                    throw runtime_error("Cannot delete borrowed book!");
                }
                for (int j = i; j < bookCount - 1; j++) {
                    books[j] = books[j + 1];
                }
                bookCount--;
                saveAllBooks();
                return true;
            }
        }
        return false;
    }

    void librarianAddMember(const string& name, const string& id,
                           const string& contact, const string& password) {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }
        if (memberCount < MAX_MEMBERS) {
            members[memberCount++] = new Member(name, id, contact, password);
            members[memberCount-1]->saveToFile();
        } else {
            throw runtime_error("Maximum member limit reached!");
        }
    }

    void librarianDisplayMembers() const {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }

        if (memberCount == 0) {
            cout << "No members registered.\n";
            return;
        }

        cout << "\nTotal Members: " << memberCount << "\n";
        cout << "===================\n";

        for (int i = 0; i < memberCount; i++) {
            cout << "\nMember " << (i + 1) << ":\n";
            members[i]->displayDetails();

            double fine = members[i]->calculateFine();
            if (fine > 0) {
                cout << "Outstanding fine: $" << fine << "\n";
            }

            cout << "-------------------\n";
        }
    }

    void generateBorrowingReport() const {
        if (!isLibrarianAuthenticated) {
            throw runtime_error("Authentication required!");
        }
        cout << "\n=== Library Status Report ===\n"
             << "Total Books: " << bookCount << "\n"
             << "Total Members: " << memberCount << "\n"
             << "Upcoming Books: " << upcomingBookCount << "\n\n"
             << "=== Currently Borrowed Books ===\n";

        int borrowedCount = 0;
        for (int i = 0; i < bookCount; i++) {
            if (!books[i].getAvailability()) {
                books[i].displayDetails();
                borrowedCount++;
                cout << "------------------------\n";
            }
        }
        cout << "Total Borrowed Books: " << borrowedCount << "\n";
    }

    // Member functions
    bool borrowBook(const string& isbn) {
        if (currentMemberId.empty()) {
            throw runtime_error("Member authentication required!");
        }

        Member* member = findMember(currentMemberId);
        Book* book = findBook(isbn);

        if (!member || !book) {
            throw runtime_error("Member or book not found!");
        }

        if (member->borrowBook(book)) {
            logTransaction(currentMemberId, isbn, true);
            saveAllBooks();
            return true;
        }
        return false;
    }

    bool returnBook(const string& isbn) {
        if (currentMemberId.empty()) {
            throw runtime_error("Member authentication required!");
        }

        Member* member = findMember(currentMemberId);
        Book* book = findBook(isbn);

        if (!member || !book) {
            throw runtime_error("Member or book not found!");
        }

        if (member->returnBook(book)) {
            logTransaction(currentMemberId, isbn, false);
            saveAllBooks();
            return true;
        }
        return false;
    }

    // Display functions
    void displayAllBooks() const {
        cout << "\n=== Available Books ===\n";
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getAvailability()) {
                books[i].displayDetails();
                cout << "------------------------\n";
            }
        }
    }

    void displayUpcomingBooks() const {
        cout << "\n=== Upcoming Books ===\n";
        for (int i = 0; i < upcomingBookCount; i++) {
            upcomingBooks[i]->displayDetails();
            cout << "------------------------\n";
        }
    }

    void displayMemberProfile() const {
        if (currentMemberId.empty()) {
            throw runtime_error("Member authentication required!");
        }
        Member* member = findMember(currentMemberId);
        if (member) {
            member->displayDetails();
            double fine = member->calculateFine();
            if (fine > 0) {
                cout << "Outstanding fine: $" << fine << "\n";
            }
        }
    }

    // Utility functions
    Book* findBook(const string& isbn) {
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getISBN() == isbn) {
                return &books[i];
            }
        }
        return nullptr;
    }

    Member* findMember(const string& id) const {
        for (int i = 0; i < memberCount; i++) {
            if (members[i]->getMemberId() == id) {
                return members[i];
            }
        }
        return nullptr;
    }
};
int main() {
    LibrarySystem library;
    int choice;
    string title, author, isbn, name, id, contact, password, releaseDate, description;

    while (true) {
        try {
            cout << "\n=== Library Management System ===\n"
                 << "1. Login as Librarian\n"
                 << "2. Login as Member\n"
                 << "3. View Available Books\n"
                 << "4. View Upcoming Books\n"
                 << "5. Exit\n"
                 << "Enter your choice: ";
            cin >> choice;
            cin.ignore();

            switch (choice) {
                case 1: {
                    cout << "\n=== Librarian Login ===\n";
                    cout << "Username: ";
                    getline(cin, name);
                    cout << "Password: ";
                    getline(cin, password);

                    if (library.authenticateLibrarian(name, password)) {
                        cout << "Login successful!\n";

                        while (true) {
                            cout << "\n=== Librarian Menu ===\n"
                                 << "1. Add Book\n"
                                 << "2. Delete Book\n"
                                 << "3. Add Member\n"
                                 << "4. View All Members\n"
                                 << "5. Add Upcoming Book\n"
                                 << "6. Generate Borrowing Report\n"
                                 << "7. Logout\n"
                                 << "Enter choice: ";
                            int libChoice;
                            cin >> libChoice;
                            cin.ignore();

                            switch (libChoice) {
                                case 1: {
                                    cout << "\n=== Add New Book ===\n";
                                    cout << "Enter title: ";
                                    getline(cin, title);
                                    cout << "Enter author: ";
                                    getline(cin, author);
                                    cout << "Enter ISBN: ";
                                    getline(cin, isbn);
                                    int year;
                                    cout << "Enter publication year: ";
                                    cin >> year;

                                    library.librarianAddBook(title, author, isbn, year);
                                    cout << "Book added successfully!\n";
                                    break;
                                }
                                case 2: {
                                    cout << "\n=== Delete Book ===\n";
                                    cout << "Enter ISBN of book to delete: ";
                                    getline(cin, isbn);
                                    if (library.librarianDeleteBook(isbn)) {
                                        cout << "Book deleted successfully!\n";
                                    } else {
                                        cout << "Book not found!\n";
                                    }
                                    break;
                                }
                                case 3: {
                                    cout << "\n=== Add New Member ===\n";
                                    cout << "Enter name: ";
                                    getline(cin, name);
                                    cout << "Enter member ID: ";
                                    getline(cin, id);
                                    cout << "Enter contact: ";
                                    getline(cin, contact);
                                    cout << "Enter password: ";
                                    getline(cin, password);

                                    library.librarianAddMember(name, id, contact, password);
                                    cout << "Member added successfully!\n";
                                    break;
                                }
                                case 4:
                                    library.librarianDisplayMembers();
                                    break;
                                case 5: {
                                    cout << "\n=== Add Upcoming Book ===\n";
                                    cout << "Enter title: ";
                                    getline(cin, title);
                                    cout << "Enter author: ";
                                    getline(cin, author);
                                    cout << "Enter release date: ";
                                    getline(cin, releaseDate);
                                    cout << "Enter description: ";
                                    getline(cin, description);

                                    library.addUpcomingBook(title, author, releaseDate, description);
                                    cout << "Upcoming book added successfully!\n";
                                    break;
                                }
                                case 6:
                                    library.generateBorrowingReport();
                                    break;
                                case 7:
                                    library.logout();
                                    cout << "Logged out successfully!\n";
                                    goto main_menu;
                                default:
                                    cout << "Invalid choice!\n";
                            }
                        }
                    } else {
                        cout << "Invalid credentials!\n";
                    }
                    break;
                }
                case 2: {
                    cout << "\n=== Member Login ===\n";
                    cout << "Member ID: ";
                    getline(cin, id);
                    cout << "Password: ";
                    getline(cin, password);

                    if (library.authenticateMember(id, password)) {
                        cout << "Login successful!\n";

                        while (true) {
                            cout << "\n=== Member Menu ===\n"
                                 << "1. View My Profile\n"
                                 << "2. View Available Books\n"
                                 << "3. View Upcoming Books\n"
                                 << "4. Borrow Book\n"
                                 << "5. Return Book\n"
                                 << "6. Logout\n"
                                 << "Enter choice: ";
                            int memChoice;
                            cin >> memChoice;
                            cin.ignore();

                            switch (memChoice) {
                                case 1:
                                    library.displayMemberProfile();
                                    break;
                                case 2:
                                    library.displayAllBooks();
                                    break;
                                case 3:
                                    library.displayUpcomingBooks();
                                    break;
                                case 4: {
                                    cout << "Enter ISBN of book to borrow: ";
                                    getline(cin, isbn);
                                    if (library.borrowBook(isbn)) {
                                        cout << "Book borrowed successfully!\n";
                                    } else {
                                        cout << "Unable to borrow book!\n";
                                    }
                                    break;
                                }
                                case 5: {
                                    cout << "Enter ISBN of book to return: ";
                                    getline(cin, isbn);
                                    if (library.returnBook(isbn)) {
                                        cout << "Book returned successfully!\n";
                                    } else {
                                        cout << "Unable to return book!\n";
                                    }
                                    break;
                                }
                                case 6:
                                    library.logout();
                                    cout << "Logged out successfully!\n";
                                    goto main_menu;
                                default:
                                    cout << "Invalid choice!\n";
                            }
                        }
                    } else {
                        cout << "Invalid credentials!\n";
                    }
                    break;
                }
                case 3:
                    library.displayAllBooks();
                    break;
                case 4:
                    library.displayUpcomingBooks();
                    break;
                case 5:
                    cout << "Thank you for using the Library Management System!\n";
                    return 0;
                default:
                    cout << "Invalid choice! Please try again.\n";
            }
            main_menu:;
        }
        catch (const exception& e) {
            cout << "Error: " << e.what() << "\n";
        }
    }
    return 0;
}
